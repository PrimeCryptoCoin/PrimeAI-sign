{"mappings":"AAGA;IACE,OAAO,EAAE,MAAM,CAAC;IAChB,SAAS,EAAE,MAAM,CAAC;IAClB,IAAI,EAAE,MAAM,CAAC;IACb,WAAW,EAAE,MAAM,CAAC;IACpB,MAAM,EAAE,MAAM,CAAC;IACf,QAAQ,EAAE,MAAM,CAAC;IACjB,MAAM,EAAE,MAAM,CAAC;IACf,KAAK,EAAE,MAAM,CAAC;CACf;AAED,qBACE,OAAO,EAAE,KAAK,GAAG,UAAU,GAAG,KAAK,GAAG,UAAU,EAChD,iBAAiB,EAAE,MAAM,EACzB,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,EACnB,WAAW,EAAE,GAAG,GACf,MAAM,CAuDR;;;;AACD,wBAEE","sources":["index.ts"],"sourcesContent":["const bitcoin = require(\"bitcoinjs-lib\");\r\nimport { chains, toBitcoinJS } from \"@hyperbitjs/chains\";\r\n\r\ninterface IUTXO {\r\n  address: string;\r\n  assetName: string;\r\n  txid: string;\r\n  outputIndex: number;\r\n  script: string;\r\n  satoshis: number;\r\n  height: number;\r\n  value: number;\r\n}\r\n\r\nexport function sign(\r\n  network: \"primeai\" | \"primeai-test\" | \"evr\" | \"evr-test\",\r\n  rawTransactionHex: string,\r\n  UTXOs: Array<IUTXO>,\r\n  privateKeys: any\r\n): string {\r\n  const networkMapper = {\r\n    primeai: chains.primeai.main,\r\n    \"primeai-test\": chains.primeai.test,\r\n    evr: chains.evr.main,\r\n    \"evr-test\": chains.evr.test,\r\n  };\r\n\r\n  const coin = networkMapper[network];\r\n\r\n  if (!coin) {\r\n    throw new Error(\r\n      \"Validation error, first argument network must be primeai, primeai-test, evr or evr-test\"\r\n    );\r\n  }\r\n\r\n  //@ts-ignore\r\n  const NEURAI = toBitcoinJS(coin);\r\n\r\n  const tx = bitcoin.Transaction.fromHex(rawTransactionHex);\r\n  const txb = bitcoin.TransactionBuilder.fromTransaction(tx, NEURAI);\r\n\r\n  function getKeyPairByAddress(address) {\r\n    const wif = privateKeys[address];\r\n    const keyPair = bitcoin.ECPair.fromWIF(wif, NEURAI);\r\n    return keyPair;\r\n  }\r\n\r\n  function getUTXO(transactionId, index) {\r\n    return UTXOs.find((utxo) => {\r\n      return utxo.txid === transactionId && utxo.outputIndex === index;\r\n    });\r\n  }\r\n\r\n  for (let i = 0; i < tx.ins.length; i++) {\r\n    const input = tx.ins[i];\r\n\r\n    const txId = Buffer.from(input.hash, \"hex\").reverse().toString(\"hex\");\r\n    const utxo = getUTXO(txId, input.index);\r\n    if (!utxo) {\r\n      throw Error(\"Could not find UTXO for input \" + input);\r\n    }\r\n    const address = utxo.address;\r\n    const keyPair = getKeyPairByAddress(address);\r\n\r\n    const signParams = {\r\n      prevOutScriptType: \"p2pkh\",\r\n      vin: i,\r\n      keyPair,\r\n      UTXO: utxo,\r\n    };\r\n    txb.sign(signParams);\r\n  }\r\n  const signedTxHex = txb.build().toHex();\r\n  return signedTxHex;\r\n}\r\nexport default {\r\n  sign,\r\n};\r\n"],"names":[],"version":3,"file":"types.d.ts.map"}